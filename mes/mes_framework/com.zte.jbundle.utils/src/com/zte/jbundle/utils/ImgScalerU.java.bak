package com.zte.e2e.util;

import ij.ImagePlus;
import ij.io.FileSaver;
import ij.io.Opener;
import ij.process.ImageProcessor;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.zte.e2e.util.Utils.FileU;

public class ImgScalerU {

    static enum ImgType {

        jpg {
            @Override
            public void save(ImagePlus imagePlus, String fileName) {
                new FileSaver(imagePlus).saveAsJpeg(fileName);
            }
        },
        bmp {
            @Override
            public void save(ImagePlus imagePlus, String fileName) {
                new FileSaver(imagePlus).saveAsBmp(fileName);
            }
        },
        gif {
            @Override
            public void save(ImagePlus imagePlus, String fileName) {
                new FileSaver(imagePlus).saveAsGif(fileName);
            }
        },
        png {
            @Override
            public void save(ImagePlus imagePlus, String fileName) {
                new FileSaver(imagePlus).saveAsPng(fileName);
            }
        };

        public abstract void save(ImagePlus imagePlus, String fileName);

        public static ImgType getImgType(String fileName) {
            String ext = FileU.fileExt(fileName).toLowerCase();
            if ("jpg".equals(ext)) {
                return jpg;
            } else if ("jpeg".equals(ext)) {
                return jpg;
            } else if ("bmp".equals(ext)) {
                return bmp;
            } else if ("gif".equals(ext)) {
                return gif;
            } else if ("png".equals(ext)) {
                return png;
            } else {
                return null;
            }
        }

    }

    private static String getScaledName(String fileName, int size) {
        String ext = FileU.fileExt(fileName);
        String name = FileU.fileExt(fileName, null) + "_" + size;
        return FileU.fileExt(name, ext);
    }

    public static List<String> scaleImages(String imgFile, int... sizes) throws Exception {
        return scaleImages(new File(imgFile), sizes);
    }

    public static List<String> scaleImages(File imgFile, int... sizes) throws Exception {
        if (!imgFile.exists()) {
            return Collections.emptyList();
        }

        ImgType imgType = ImgType.getImgType(imgFile.getName());
        if (imgType != null) {
            /* 打开一个图片文件 */
            ImagePlus srcImagePlus = new Opener().openImage(imgFile.getAbsolutePath());
            if (srcImagePlus == null) {
                throw new IOException("待压缩图片文件【" + imgFile + "】不存在");
            }

            List<String> ret = new ArrayList<String>();
            for (int size : sizes) {
                String scaledName = getScaledName(imgFile.getName(), size);
                File newImgFile = new File(imgFile.getParent(), scaledName);
                imgType.save(makeScale(srcImagePlus, size), newImgFile.getAbsolutePath());
                ret.add(scaledName);
            }
            return ret;
        } else {
            return Collections.emptyList();
        }
    }

    /** 压缩图片，将传递进去的ImagePlus 对象根据压缩大小scaleSize转换成目标ImagePlus对象，并返回 */
    private static ImagePlus makeScale(ImagePlus plus, int scaleSize) {
        if (plus == null)
            return null;
        // 用于保存记录图片中较长的一边和较短的一边
        int bigger = 0;
        int lessor = 0;
        // 新的图片的长和宽
        int new_width = 0, new_height = 0;
        // 获取现有图片的长和宽
        int width = plus.getWidth();
        int height = plus.getHeight();
        // 比例因子
        double factor = 0L;
        // 记录那一边最长，以便后面生成新的图片的时候知道谁是长边，谁是短边
        boolean isWidth = false;
        if (width <= height) {
            bigger = height;
            lessor = width;
        } else {
            isWidth = true;
            bigger = width;
            lessor = height;
        }
        /* 计算比例因子 */
        factor = lessor * 1.0 / bigger;

        /*
         * 如果是最大的一边大于maxSize(比如是310)，
         * 则按照比例生成新的长和宽，生成规则是最大的一边置为scaleSize，小的一边则是小边长度/大边长度*scaleSize
         */
        if (bigger > scaleSize) {
            // 如果原图中宽比较大，则新图中宽设置成最大值，否则，长设成最大值
            if (isWidth) {
                new_width = scaleSize;
                new_height = (int) (scaleSize * factor);
            } else {
                new_height = scaleSize;
                new_width = (int) (scaleSize * factor);

            }
        }
        // 如果最大的一边都没有规定的大图的边大，则新图片的长宽都是原来的值
        else if (bigger <= scaleSize) {
            if (isWidth) {
                new_width = bigger;
                new_height = lessor;
            } else {
                new_height = bigger;
                new_width = lessor;
            }
        }
        // 根据传递的plus对象获取对它进行处理的ImageProcessor对象
        ImageProcessor ip = plus.getProcessor();
        if (plus.getType() == ImagePlus.COLOR_256)
            ip = ip.convertToRGB();
        ip.setInterpolate(true);
        ImageProcessor ip2 = ip.resize(new_width, new_height);
        ip.reset();
        return new ImagePlus("", ip2);
    }

}
